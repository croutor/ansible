# written on ansible 2.3.2.0
---
    ###################
    # User Management
    ###################
    - name: Create user {{ users.user1.name }}
      user: name={{ users.user1.name }}
            comment="{{ users.user1.name }} user"
            shell=/bin/bash

#    - name: Add {{ user }} to sudoers
#      template: src=templates/sudoers-user.j2
#                dest=/etc/sudoers.d/{{ users.user1.name }}-sudoer
#                validate='visudo -cf %s'

#    - name: Add my public key to {{ user }}
#      authorized_key: user={{ users.user1.name }}
#                      key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    ###################
    # Time management
    ###################
    - name: Set local timezone
      timezone:
              name={{ local.timezone }}

    ###################
    # Debian packages
    ###################
    - name: Install Debian packages
      package: name={{ item }} state=latest
      with_items:
        - audacity
        - apt-transport-https
        - build-essential
        - ddd
        - esmtp
        - exuberant-ctags
        - filezilla 
        - git
        - gitg
        - gparted
        - htop
        - libncurses5-dev 
        - libssl-dev
        - make 
        - meld
        - mixxx
        - mutt
        - python-pip
        - psutils
        - shellcheck
        - socat
        - sshpass
        - subversion
        - sudo
        - terminator
        - tree
        - valgrind
        - vim
        - vlc
        - x11-xserver-utils

    ###################
    # Python / Virtualenv
    ###################
    - name: Install virtualenv
      pip: name=virtualenv

    ###################
    # Google Chrome
    ###################
    - name: Does the Google apt file exist?
      command: test -f {{apt.chrome_source_file}}
      register: google_apt_exists
      ignore_errors: True

    - name: Add Google Chrome key
      shell: wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
      when: google_apt_exists.rc == 1

    - name: Add Google Chrome repo
      apt_repository:
        repo="deb http://dl.google.com/linux/chrome/deb/ stable main"
        state"present
        filename={{apt.chrome_source_file}}
      when: google_apt_exists.rc == 1

    - name: Update apt cache
      apt: update_cache=yes
      when: google_apt_exists.rc == 1

    - name: Install Google Chrome
      apt: pkg=google-chrome-stable state=installed

    ###################
    # Sublime text
    ###################
    - name: Does the Sublime text apt file exist?
      command: test -f {{apt.sublimetxt_source_file}}
      register: sublimetxt_apt_exists
      ignore_errors: True

    - name: Add Sublime text key
      shell: wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
      when: sublimetxt_apt_exists.rc == 1

    - name: Add Sublime text repo
      apt_repository:
        repo="deb https://download.sublimetext.com/ apt/stable/"
        state"present
        filename={{apt.sublimetxt_source_file}}
      when: sublimetxt_apt_exists.rc == 1

    - name: Update apt cache
      apt: update_cache=yes
      when: sublimetxt_apt_exists.rc == 1

    - name: Install Sublime text
      apt: pkg=sublime-text state=installed

    ###################  
    # Dropbox
    ###################
    - name: Does the Dropbox startup file exist?
      command: test -f /home/{{users.user1.name}}/.config/autostart/dropbox.desktop
      register: dropbox_startup_exists
      ignore_errors: True

    - name: Download Dropbox
      get_url: url="{{apt.dropbox_url}}"
               dest="/tmp/{{apt.dropbox_package}}"
      when: dropbox_startup_exists.rc == 1

    - name: Install Dropbox
      apt:  deb="/tmp/{{apt.dropbox_package}}"
            state=present
      when: dropbox_startup_exists.rc == 1

    - name: Download Dropbox daemon
      shell: cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
      become: true
      become_user: "{{users.user1.name}}"
      when: dropbox_startup_exists.rc == 1

    - name: Start Dropbox automatically on startup
      template: src=dropbox.desktop.tpl
                dst=/home/{{users.user1.name}}/.config/autostart/dropbox.desktop
                owner="{{users.user1.name}}"
                group="{{users.user1.name}}"
      when: dropbox_startup_exists.rc == 1

    ###################
    # Vim config
    ###################
    - name: Vim configuration
      template: 
           src={{role_path}}/templates/.vimrc.tpl
           dest=/home/{{users.user1.name}}/.vimrc
           owner="{{users.user1.name}}"
           group="{{users.user1.name}}"

    ###################
    # mutt config
    ###################
    - name: Mutt configuration
      template:
           src={{role_path}}/templates/.muttrc.j2
           dest=/home/{{users.user1.name}}/.muttrc
           owner="{{users.user1.name}}"
           group="{{users.user1.name}}"
           mode=0600

    ###################
    # git config
    ###################
    - name: Git configuration
      git_config:
              name=user.email
              value={{users.user1.email}}
              scope=global
      become: true
      become_user: "{{users.user1.name}}"

    - git_config:
              name=user.name
              value={{users.user1.name}}
              scope=global
      become: true
      become_user: "{{users.user1.name}}"

    - git_config:
              list_all=yes
              scope=global
      become: true
      become_user: "{{users.user1.name}}"

  ###################

